---
- name: Unexpected OS
  fail:
    msg: "OS Family {{ ansible_os_family }} is not supported"
  when: >
    ansible_os_family != 'RedHat' and
    ansible_os_family != 'Suse'

- set_fact:
    zabbix_agent: {}
  when: zabbix_agent is undefined

- set_fact:
    role_packages:
      - policycoreutils
      - "{{zabbix_agent_package|default('zabbix-agent')}}"
      - fping
  when: >
    ansible_os_family == "RedHat" and
    ansible_distribution_major_version != '7'

- set_fact:
    role_packages:
      - policycoreutils
      - libselinux-python
      - libsemanage-python
      - "{{zabbix_agent_package|default('zabbix40-agent')}}"
      - fping
  when: >
    ansible_os_family == "RedHat" and
    ansible_distribution_major_version == '7'

- name: remove old zabbix agent
  yum:
    name:
      - zabbix22
      - zabbix22-agent
    state: absent
  when: >
    ansible_os_family == "RedHat" and
    ansible_distribution_major_version == '7'

- set_fact:
    role_packages:
      - "{{zabbix_agent_package|default('zabbix-agent')}}"
      - fping
    zabbix_agent_conf: "zabbix-agent.conf"
    zabbix_agentd_conf: "zabbix-agentd.conf"
    zabbix_conf_dir: "/etc/zabbix"
    zabbix_service: "zabbix-agentd"
  when: >
    ansible_os_family == "Suse"

- include_role:
    name: basic-host
    tasks_from: install_packages

- service_facts:
  when: >
    ansible_os_family == "Suse"

- set_fact:
    zabbix_service: "zabbix_agentd"
  when: >
    ansible_os_family == "Suse" and
    ansible_facts.services["zabbix_agentd.service"] is defined

- set_fact:
    zbx_client_ip: "{{hostvars[inventory_hostname]['ansible_'+zabbix_interface]['ipv4']['address']}}"
  when: >
    zbx_client_ip is undefined and
    zabbix_interface is defined

# this would be nice and easy if ansible_all_ipv4_addresses would contain
# netmasks...
- name: try to locate client IP by available networks
  set_fact:
    zbx_server_ip: "{{__netconf.0|ipaddr('address')}}"
    zbx_client_ip: "{{hostvars[inventory_hostname]['ansible_' + __netconf.1].ipv4.address}}"
  loop_control:
    loop_var: __netconf
  with_nested:
    - "{{zabbix_server_ips|default({})}}"
    - "{{hostvars[inventory_hostname]['ansible_interfaces']}}"
  when: >
    zbx_client_ip is undefined and
    hostvars[inventory_hostname]['ansible_' + __netconf.1].ipv4.address is defined and
    __netconf.0|ipaddr('network/prefix') ==
      (hostvars[inventory_hostname]['ansible_' + __netconf.1].ipv4.address + "/" +
       hostvars[inventory_hostname]['ansible_' + __netconf.1].ipv4.netmask)|ipaddr('network/prefix')

# server IP is used in the template to override both server and active server,
# if a subnet match was found
- debug:
    msg:
      - "using client IP {{zbx_client_ip}}"
      - "using server IP {{zbx_server_ip|default('')}}"
  when: zbx_client_ip is defined

- name: configure sudoers for zabbix
  include_role:
    name: basic-host
    tasks_from: sudoers_entry.yml
  vars:
    _sudo_dict: "{{zabbix_sudo_dict|default(zabbix_agent.sudo_dict)}}"
  when: >
    zabbix_sudo_dict is defined or
    zabbix_agent.sudo_dict is defined and
    (zabbix_skip_sudo is undefined or zabbix_skip_sudo != true)

- name: configure sudoers for zabbix (default)
  include_role:
    name: basic-host
    tasks_from: sudoers_entry.yml
  vars:
    _sudo_dict:
      zabbix:
        sudoers:
          - "ALL=(ALL) NOPASSWD: /usr/bin/ping /usr/sbin/fping"
  when: >
    zabbix_sudo_dict is undefined and
    zabbix_agent.sudo_dict is undefined and
    (zabbix_skip_sudo is undefined or zabbix_skip_sudo != true)

- name: configure zabbix agent TCP port
  firewalld:
    port: 10050/tcp
    permanent: true
    state: enabled
    immediate: true
    zone: "{{item}}"
  with_items: "{{zabbix_agent_firewall_zones|default(zabbix_agent.firewall_zones)}}"
  when: >
    (firewalld_available is defined and
    firewalld_available == True) and
    (zabbix_agent_firewall_zones is defined or
     zabbix_agent.firewall_zones is defined)

- name: configure zabbix agent UDP port
  firewalld:
    port: 10050/udp
    permanent: true
    state: enabled
    immediate: true
    zone: "{{item}}"
  with_items: "{{zabbix_agent_firewall_zones|default(zabbix_agent.firewall_zones)}}"
  when: >
    (firewalld_available is defined and
    firewalld_available == True) and
    (zabbix_agent_firewall_zones is defined or
     zabbix_agent.firewall_zones is defined)

- name: Ensures include dirs exists
  file:
    path: "{{ item }}"
    state: directory
  with_items: "{{ zbx_agent_Include }}"

- name: install Zabbix Agentd Config File
  template:
    src: zabbix_agentd.conf.j2
    dest: "{{zabbix_conf_dir|default('/etc')}}/{{zabbix_agentd_conf|default('zabbix_agentd.conf')}}"
    owner: root
    group: root
    mode: 0644
    backup: yes
  notify:
    - restart zabbix-agent

- name: install Zabbix Agent Config File
  template:
    src: zabbix_agent.conf.j2
    dest: "{{zabbix_conf_dir|default('/etc')}}/{{zabbix_agent_conf|default('zabbix_agent.conf')}}"
    owner: root
    group: root
    mode: 0644
    backup: yes
  notify:
    - restart zabbix-agent

- name: ensure Zabbix Agent is running
  service:
    name: "{{zabbix_service|default('zabbix-agent')}}"
    state: started
    enabled: yes

- name: configure SELinux Policy zabbix
  seboolean: name=zabbix_can_network state=yes persistent=yes
  when: >
    ansible_selinux is defined and
    ansible_selinux != False and
    ansible_selinux.status == 'enabled'

- name: build inventory dict
  include: build_inventory_dict.yml
  vars:
    _zabbix_host: "{{inventory_hostname}}"

- name: create a new host or update information
  become: no
  local_action:
    module: zabbix_host
    server_url: "{{ server_url }}"
    login_user: "{{ zabbix_api_user|default('Admin') }}"
    login_password: "{{lookup(passdb, zabbix_server_admin_passwd)}}"
    host_name: "{{ ansible_hostname }}"
    host_groups: "{{ host_groups }}"
    link_templates: "{{ link_templates }}"
    status: "enabled"
    state: "present"
    inventory_mode: manual
    inventory_zabbix: "{{_zabbix_inventory_dict}}"
    interfaces:
      - type: 1
        main: 1
        useip: 1
        ip: "{{ zbx_client_ip | default(ansible_default_ipv4.address) }}"
        dns: ""
        port: 10050
    proxy: ""
  when: zbx_create_host == 1
