---
- name: Unexpected OS
  fail:
    msg: "OS Family {{ ansible_os_family }} is not supported"
  when: >
    ansible_os_family != 'RedHat' and
    ansible_os_family != 'Suse' and
    ansible_os_family != 'Debian' and
    ansible_os_family != 'Darwin' and
    ansible_os_family != 'Windows'

- set_fact:
    zabbix_agent: {}
  when: zabbix_agent is undefined

- set_fact:
    zbx_client_ip: "{{hostvars[inventory_hostname]['ansible_'+zabbix_interface]['ipv4']['address']}}"
  when: >
    zbx_client_ip is undefined and
    zabbix_interface is defined

- debug:
    msg:
      - "{{zabbix_server_ips|default({})}}"
      - "{{hostvars[inventory_hostname]['ansible_interfaces']}}"

- debug:
    msg:
      - "{{__netconf.0}}"
      - "{{__netconf.1}}"
  loop_control:
    loop_var: __netconf
  with_nested:
    - "{{zabbix_server_ips|default({})}}"
    - "{{hostvars[inventory_hostname]['ansible_interfaces']}}"

# this would be nice and easy if ansible_all_ipv4_addresses would contain
# netmasks...
- name: try to locate client IP by available networks
  set_fact:
    zbx_server_ip: "{{__netconf.0|ipaddr('address')}}"
    zbx_client_ip: "{{hostvars[inventory_hostname]['ansible_' + __netconf.1].ipv4.address}}"
  loop_control:
    loop_var: __netconf
  with_nested:
    - "{{zabbix_server_ips|default({})}}"
    - "{{hostvars[inventory_hostname]['ansible_interfaces']}}"
  when: >
    zbx_client_ip is undefined and
    hostvars[inventory_hostname]['ansible_' + __netconf.1].ipv4.address is defined and
    __netconf.0|ipaddr('network/prefix') ==
      (hostvars[inventory_hostname]['ansible_' + __netconf.1].ipv4.address + "/" +
       hostvars[inventory_hostname]['ansible_' + __netconf.1].ipv4.netmask)|ipaddr('network/prefix')

# server IP is used in the template to override both server and active server,
# if a subnet match was found
- debug:
    msg:
      - "using client IP {{zbx_client_ip}}"
      - "using server IP {{zbx_server_ip|default('')}}"
  when: zbx_client_ip is defined

- include_tasks: main_darwin.yml
  when: ansible_os_family == "Darwin"

- include_tasks: main_windows.yml
  when: ansible_os_family == "Windows"

- include_tasks: main_default.yml
  when: >
    ansible_os_family != "Windows" and
    ansible_os_family != "Darwin"

- name: build inventory dict
  include_tasks: build_inventory_dict.yml
  vars:
    _zabbix_host: "{{inventory_hostname}}"

- debug:
    msg:
      - "Information about zabbix agent host"
      - "Name: {{ansible_hostname}}"
      - "Interface: {{ zbx_client_ip | default(ansible_default_ipv4.address) }}"
      - "Groups: {{host_groups}}"
      - "Templates: {{link_templates}}"
  when: >
    zbx_create_host == 1 and
    (ansible_default_ipv4.address is defined or zbx_client_ip is defined)

- name: create a new host or update information (legacy)
  become: no
  local_action:
    module: zabbix_host
    server_url: "{{ server_url }}"
    login_user: "{{ zabbix_api_user|default('Admin') }}"
    login_password: "{{lookup(passdb, zabbix_server_admin_passwd)}}"
    host_name: "{{ ansible_hostname }}"
    host_groups: "{{ host_groups }}"
    link_templates: "{{ link_templates }}"
    status: "enabled"
    state: "present"
    inventory_mode: manual
    inventory_zabbix: "{{_zabbix_inventory_dict}}"
    interfaces:
      - type: 1
        main: 1
        useip: 1
        ip: "{{ zbx_client_ip | default(ansible_default_ipv4.address) }}"
        dns: ""
        port: 10050
    proxy: ""
  when: >
    (ansible_version.full is version('2.9', '>=') and
     ansible_version.full is version('2.10', '<')) and
    zbx_create_host == 1 and
    (ansible_default_ipv4.address is defined or zbx_client_ip is defined)

- include_tasks: create_host_entry.yml
  when: >
    ansible_version.full is version('2.10', '>=') and
    zbx_create_host == 1 and
    (ansible_default_ipv4.address is defined or zbx_client_ip is defined)
